# -*- coding: utf-8 -*-
"""DogVsCatClass.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SF0GHlql-d5dkwJkvX_r67LoxPGm3uqs
"""

#installing the kaggle library
!pip install kaggle

#configuring the path of kaggle.json file

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

#kaggle api
!kaggle competitions download -c dogs-vs-cats

!ls

#extracting the compressed dataset
from zipfile import ZipFile
dataset='/content/dogs-vs-cats.zip'
with ZipFile(dataset,'r') as zip:
  zip.extractall()
  print('dataset is extracted')

#extracting the compressed dataset
from zipfile import ZipFile
dataset='/content/train.zip'
with ZipFile(dataset,'r') as zip:
  zip.extractall()
  print('dataset is extracted')

#extracting the compressed dataset
from zipfile import ZipFile
dataset='/content/test1.zip'
with ZipFile(dataset,'r') as zip:
  zip.extractall()
  print('dataset is extracted')

import os
#counting the number of files in train folder
path,dirs,files=next(os.walk('/content/train'))
file_count=len(files)
print("number of files=", file_count)

"""printing the names of images"""

file_names=os.listdir('/content/train')
print(file_names)

"""import the dependencies"""

import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from sklearn.model_selection import train_test_split
from google.colab.patches import cv2_imshow

"""displaying images of dogs"""

#display dog image
img= mpimg.imread('/content/train/dog.8335.jpg')
imgplt=plt.imshow(img)
plt.show()

for i in range(len(file_names)):
  name=file_names[i]
  print(name[0:3])

dog_cnt=0
cat_cnt=0

for img_file in file_names:
  name=img_file[0:3]
  if name=='dog':
    dog_cnt+=1
  else:
    cat_cnt+=1

print("number of dog images are=", dog_cnt)
print("number of cat images are=", cat_cnt)

"""resizing all the images"""

# creating a directory to store resized images
os.mkdir('/content/image_resized')

original_folder='/content/train/'
resized_folder='/content/image_resized/'

for i in range(2000):
  filename=os.listdir(original_folder)[i]
  img_path=original_folder+filename

  img= Image.open(img_path)
  img= img.resize((224,224))
  img=img.convert('RGB')

  newImgPath=resized_folder+filename
  img.save(newImgPath)

#displaying resized dog image

img=mpimg.imread('/content/train/dog.8335.jpg')
imgplt=plt.imshow(img)
plt.show()

"""creating labels for resized images of dogs and cats

Cat -> 0
Dog ->1
"""

#creating a for loop to assign labels
file_names=os.listdir('/content/image_resized/')
labels=[]
for i in range(2000):
  file_name = file_names[i]
  label=file_name[0:3]

  if label == 'dog':
    labels.append(1)
  else:
    labels.append(0)

print(labels[0:3])

#counting the images of dogs and cats out of 2000 images

values,counts=np.unique(labels,return_counts=True)
print(counts)

"""Converting all the resized images to numpy arrays"""

import cv2
import glob

image_directory = '/content/image_resized/'
image_extension = ['png', 'jpg']

files = []

[files.extend(glob.glob(image_directory + '*.' + e)) for e in image_extension]

dog_cat_images = np.asarray([cv2.imread(file) for file in files])

print(dog_cat_images)

type(dog_cat_images)

print(dog_cat_images.shape)

x= dog_cat_images
y=np.asarray(labels)

"""Train test split

"""

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=2)

print(x.shape,x_train.shape,x_test.shape)

x_train_scaled =x_train/255
x_test_scaled=x_test/255

"""Building the neural network"""

import tensorflow as tf
import tensorflow_hub as hub

mobilenet_model = 'https://tfhub.dev/google/tf2-preview/mobilenet_v2/feature_vector/4'
pretrained_model=hub.KerasLayer(mobilenet_model, input_shape=(224,224,3), trainable=False)

num_of_classes=2

model=tf.keras.Sequential([
    pretrained_model,
    tf.keras.layers.Dense(num_of_classes)
])

model.summary()

model.compile(
    optimizer='adam',
    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
    metrics=['acc']
)

model.fit(x_train_scaled, y_train, epochs=5)

score,ac = model.evaluate(x_test_scaled, y_test)
print("test loss=",score)
print("test accuracy=",ac)

"""building a predictive system"""

input_image_path=input("path of the image to be predicted:")
input_image = cv2.imread(input_image_path)

cv2_imshow(input_image)
input_image_resize=cv2.resize(input_image, (224,224))
input_image_scaled=input_image_resize/255

image_reshaped=np.reshape(input_image_scaled,[1,224,224,3])
input_prediction=model.predict(image_reshaped)
input_pred_label=np.argmax(input_prediction)

if input_pred_label==0:
  print("its a cat")
else:
  print("its a dog")

